        -:    0:Source:src/molecule_requester.c
        -:    1:/**
        -:    2: * @file atom_supplier.c
        -:    3: * @brief Client side network application that connects to a server and receives data
        -:    4: * https://beej.us/guide/bgnet/html/split-wide/client-server-background.html#a-simple-stream-client
        -:    5: * @date 2025-05-31
        -:    6: */
        -:    7:
        -:    8: #include <stdio.h>      // Standard input/output functions (printf, fprintf, etc.)
        -:    9: #include <stdlib.h>     // General utilities (exit, malloc, etc.)
        -:   10: #include <unistd.h>     // UNIX standard functions (close, etc.)
        -:   11: #include <errno.h>      // Error number definitions
        -:   12: #include <string.h>     // String manipulation functions (memset, etc.)
        -:   13: #include <netdb.h>      // Network database operations (getaddrinfo, etc.)
        -:   14: #include <sys/types.h>  // Various data type definitions 
        -:   15: #include <netinet/in.h> // Internet address family structures and constants
        -:   16: #include <sys/socket.h> // Socket API definitions
        -:   17: #include <ctype.h>
        -:   18: #include <arpa/inet.h>  // Functions for manipulating IP addresses (inet_ntop, etc.)
        -:   19: #include "../include/const.h"
        -:   20: #include "../include/atom_supplier_funcs.h"
        -:   21: #include <unistd.h>
        -:   22: #include <getopt.h>
        -:   23: #include <sys/un.h>
        -:   24: 
        -:   25:
    #####:   26: void ask_supplier(unsigned long long* amount, char* atom, size_t atom_size) {
    #####:   27:    int index = 0;
        -:   28:    
    #####:   29:    memset(atom, 0, atom_size);  // Safe clearing
        -:   30:    
    #####:   31:    printf("Enter your desired choice:\n(1) CARBON\n(2) OXYGEN\n(3) HYDROGEN\n");
    #####:   32:    if (scanf("%d", &index) != 1) {
    #####:   33:        fprintf(stderr, "Error: Invalid input\n");
    #####:   34:        return;
        -:   35:    }
        -:   36:    
    #####:   37:    printf("Enter your desired amount:\n");
    #####:   38:    if (scanf("%llu", amount) != 1) {  // %llu for unsigned long long
    #####:   39:        fprintf(stderr, "Error: Invalid amount\n");
    #####:   40:        return;
        -:   41:    }
        -:   42:    
    #####:   43:    switch(index) {
    #####:   44:        case 1: strncpy(atom, "CARBON", atom_size-1); break;
    #####:   45:        case 2: strncpy(atom, "OXYGEN", atom_size-1); break;
    #####:   46:        case 3: strncpy(atom, "HYDROGEN", atom_size-1); break;
    #####:   47:        default: 
    #####:   48:            fprintf(stderr, "Error: Invalid selection\n");
    #####:   49:            return;
        -:   50:    }
    #####:   51:    atom[atom_size-1] = '\0';  // Ensure null-termination
        -:   52:}
        -:   53:
        1:   54:void ask_requester(unsigned long long* amount, char* element, size_t element_size) {
        1:   55:    int index = 0;
        -:   56:    
        1:   57:    memset(element, 0, element_size);  // Safe clearing
        -:   58:    
        1:   59:    printf("Enter your desired choice:\n(1) WATER\n(2) CARBON DIOXIDE\n(3) GLUCOSE\n(4) ALCOHOL\n");
        1:   60:    if (scanf("%d", &index) != 1) {
    #####:   61:        fprintf(stderr, "Error: Invalid input\n");
    #####:   62:        return;
        -:   63:    }
        -:   64:    
        1:   65:    printf("Enter your desired amount:\n");
        1:   66:    if (scanf("%llu", amount) != 1) {  // %llu for unsigned long long
    #####:   67:        fprintf(stderr, "Error: Invalid amount\n");
    #####:   68:        return;
        -:   69:    }
        -:   70:
        1:   71:    switch(index) {
        1:   72:        case 1: strncpy(element, "WATER", element_size-1); break;
    #####:   73:        case 2: strncpy(element, "CARBONDIOXIDE", element_size-1); break;
    #####:   74:        case 3: strncpy(element, "GLUCOSE", element_size-1); break;
    #####:   75:        case 4: strncpy(element, "ALCOHOL", element_size-1); break;
    #####:   76:        default: 
    #####:   77:            fprintf(stderr, "Error: Invalid selection\n");
    #####:   78:            return;
        -:   79:    }
        1:   80:    element[element_size-1] = '\0';  // Ensure null-termination
        -:   81:}
        -:   82:
    #####:   83:void *get_in_addr(struct sockaddr *sa)
        -:   84:{
        -:   85:    // Check if the address is IPv4
    #####:   86:    if (sa->sa_family == AF_INET) {
        -:   87:        // If IPv4, return the address from sockaddr_in structure
    #####:   88:        return &(((struct sockaddr_in*)sa)->sin_addr);
        -:   89:    }
        -:   90:
        -:   91:    // Otherwise, assume IPv6 and return the address from sockaddr_in6 structure
    #####:   92:    return &(((struct sockaddr_in6*)sa)->sin6_addr);
        -:   93:}
        -:   94:
        -:   95: // for get opt
        -:   96: extern char *optarg;
        -:   97: extern int optind, opterr, optopt;
        -:   98: 
        -:   99: const char* IP; // The IP number the client will connect to on the server
        -:  100: const char* PORT; // The port number the client will connect to on the server
        -:  101: const char* PATH; // Path for the AF_UNIX prot
        -:  102: 
        -:  103: // ARGUMENTS FLAGS
        -:  104: int flag_f = 0;
        -:  105: int flag_h = 0;
        -:  106: int flag_p = 0;
        -:  107: 
        -:  108: 
        -:  109: 
        4:  110: int main(int argc, char *argv[])
        -:  111: {
        -:  112:     int sockfd;                     // Socket file descriptor
        -:  113:     int numbytes;                   // Number of bytes received 
        -:  114:     char buf[MAXDATASIZE];          // Buffer to store received data
        -:  115:     struct addrinfo hints;          // Criteria for address selection
        -:  116:     struct addrinfo *servinfo;      // Linked list of results from getaddrinfo
        -:  117:     int rv;                         // Return value for getaddrinfo
        -:  118: 
        -:  119:      // Check if all the needed args was provided as a command-line argument
        4:  120:      if (argc < 3) {
        1:  121:         fprintf(stderr,"usage: ./atom_supplier.out -h <IP/hostname> -p <port> OR -f <UDS socket file path>\n");
        1:  122:         exit(1);
        -:  123:     }
        -:  124: 
        -:  125: 
        -:  126:     // check then option you got from the user:
        3:  127:     int ret = getopt(argc, argv, "p:h:f:");
        -:  128:     char *endptr; // for checking if the value is digit
        3:  129:     long val = 0;
        -:  130: 
        7:  131:       while(ret != -1){
        6:  132:         switch(ret){
        2:  133:             case 'p': {
        2:  134:                 if(flag_f){
    #####:  135:                     fprintf(stderr, "ERROR: cannot use -f and (-p, -h) together\n");
    #####:  136:                     exit(1);
        -:  137:                 }
        2:  138:                 if (optarg == NULL) {
    #####:  139:                     fprintf(stderr, "ERROR: Missing argument for option -%c\n", ret);
    #####:  140:                     exit(1);
        -:  141:                 }
        2:  142:                 val = strtol(optarg, &endptr, 10);
        2:  143:                 if (*endptr != '\0' || val <= 0 || val > 65535) {
        1:  144:                     fprintf(stderr,"ERROR: Invalid argument for PORT\n");
        1:  145:                     exit(1);
        -:  146:                 }
        1:  147:                 flag_p = 1;
        1:  148:                 PORT = optarg;
        1:  149:                 break;
        -:  150:             }
        2:  151:             case 'h': {
        2:  152:                 if(flag_f){
    #####:  153:                     fprintf(stderr, "ERROR: cannot use -f and (-p, -h) together\n");
    #####:  154:                     exit(1);
        -:  155:                 }
        2:  156:                 if (optarg == NULL) {
    #####:  157:                     fprintf(stderr, "ERROR: Missing argument for option -%c\n", ret);
    #####:  158:                     exit(1);
        -:  159:                 }
        2:  160:                 flag_h = 1;
        2:  161:                 IP = optarg;
        2:  162:                 break;
        -:  163:             }
        2:  164:             case 'f': {
        2:  165:                 if(flag_h || flag_p){
        1:  166:                     fprintf(stderr, "ERROR: cannot use -f and (-p, -h) together\n");
        1:  167:                     exit(1);
        -:  168:                 }
        1:  169:                 if (optarg == NULL) {
    #####:  170:                     fprintf(stderr, "ERROR: Missing argument for option -%c\n", ret);
    #####:  171:                     exit(1);
        -:  172:                 }
        1:  173:                 flag_f = 1;
        1:  174:                 PATH = optarg;
        1:  175:                 break;
        -:  176:             }
        -:  177:         }
        4:  178:         ret = getopt(argc, argv, "p:h:f:");
        -:  179:     }
        -:  180: 
        1:  181:     if((flag_p !=1 && flag_h ==1) || (flag_h != 1 && flag_p ==1)){
    #####:  182:         fprintf(stderr, "ERROR: -h should come with -p, vice versa -%c\n", ret);
    #####:  183:         exit(1);
        -:  184:     }
        -:  185: 
        -:  186:     struct sockaddr_un unix_server_addr;
        -:  187:     struct sockaddr_in udp_server_addr;
        -:  188: 
        -:  189: 
       1*:  190:     if (flag_p && flag_h){
        -:  191:         // Initialize hints structure with zeros
    #####:  192:         memset(&hints, 0, sizeof hints);
    #####:  193:         hints.ai_family = AF_UNSPEC;    // Allow either IPv4 or IPv6
    #####:  194:         hints.ai_socktype = SOCK_DGRAM; // Use UDP dgram sockets
        -:  195: 
        -:  196:         // Get address information for the server using the provided hostname
    #####:  197:         if ((rv = getaddrinfo(IP, PORT, &hints, &servinfo)) != 0) {
    #####:  198:             fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
    #####:  199:             return 1;
        -:  200:         }
        -:  201: 
        -:  202:         // create a UDP socket
    #####:  203:         sockfd = socket(AF_INET,SOCK_DGRAM,0);
    #####:  204:         if(sockfd < 0){
    #####:  205:             perror("SOCKET CREATION FAILED");
    #####:  206:             exit(1);
        -:  207:         }
        -:  208:         
    #####:  209:         socklen_t addr_len = sizeof(udp_server_addr);
    #####:  210:         memset(&udp_server_addr, 0,addr_len);
    #####:  211:         udp_server_addr.sin_family = AF_INET;
    #####:  212:         udp_server_addr.sin_port = htons(atoi(PORT));
        -:  213: 
    #####:  214:         inet_pton(AF_INET,IP,&udp_server_addr.sin_addr);
        -:  215:         
        1:  216:         }else if(flag_f){
        -:  217:            
        -:  218:             // create fd for the UNIX dgram socket
        1:  219:             sockfd = socket(AF_UNIX, SOCK_DGRAM, 0);
        -:  220:     
        -:  221:             // check if failed to create FD
        1:  222:             if(sockfd == -1){
    #####:  223:                 perror("unix dgram socket");
    #####:  224:                 exit(1);
        -:  225:             }
        -:  226:     
        -:  227:             // Bind client socket to a unique abstract address (not a file)
        -:  228:             struct sockaddr_un client_addr;
        1:  229:             memset(&client_addr, 0, sizeof(client_addr));
        1:  230:             client_addr.sun_family = AF_UNIX;
        1:  231:             client_addr.sun_path[0] = '\0'; // abstract namespace
        1:  232:             snprintf(&client_addr.sun_path[1], sizeof(client_addr.sun_path) - 1, "mreq_%d", getpid());
        1:  233:             socklen_t client_addr_len = offsetof(struct sockaddr_un, sun_path) + 1 + strlen(&client_addr.sun_path[1]);
        1:  234:             if (bind(sockfd, (struct sockaddr*)&client_addr, client_addr_len) == -1) {
    #####:  235:                 perror("bind client");
    #####:  236:                 close(sockfd);
    #####:  237:                 exit(1);
        -:  238:             }
        -:  239:
        -:  240:             // preparing server address struct
        1:  241:             memset(&unix_server_addr, 0, sizeof(unix_server_addr));
        1:  242:             unix_server_addr.sun_family = AF_UNIX;
        1:  243:             strncpy(unix_server_addr.sun_path, PATH, sizeof(unix_server_addr.sun_path) - 1);
        -:  244:             
        -:  245:         }
        -:  246:         // GET USER INPUT
        1:  247:         unsigned long long* amount = malloc(sizeof(unsigned long long));
        1:  248:         memset(amount,0,sizeof(*amount));
        -:  249:         char element[20];
        1:  250:         ask_requester(amount, element, sizeof(element));
        -:  251: 
        -:  252:         // Format the message to send to server: ADD {atom} {amount}
        -:  253:         char send_buf[MAXDATASIZE];
        1:  254:         snprintf(send_buf, MAXDATASIZE, "DELIVER %s %llu", element, *amount);
        -:  255: 
       1*:  256:         if(flag_p && flag_h){
        -:  257: 
    #####:  258:         socklen_t udp_addr_len = sizeof(udp_server_addr);
        -:  259: 
        -:  260:         // Send the formatted request to server
    #####:  261:         if (sendto(sockfd, send_buf, strlen(send_buf), 0, (struct sockaddr*)&udp_server_addr, udp_addr_len) == -1) {
    #####:  262:             perror("sendto");
    #####:  263:             close(sockfd);
    #####:  264:             exit(1);
        -:  265:         }
        -:  266: 
    #####:  267:         printf("client: sent request via STREAM--> '%s'\n", send_buf);
        -:  268: 
    #####:  269:         if ((numbytes = recvfrom(sockfd, buf, MAXDATASIZE-1, 0, (struct sockaddr*)&udp_server_addr, &udp_addr_len)) == -1) {
    #####:  270:             perror("recv");
    #####:  271:             exit(1);
        -:  272:         }
        1:  273:     }else if(flag_f){
        -:  274: 
        1:  275:         socklen_t unix_addr_len = sizeof(unix_server_addr);
        -:  276: 
        -:  277:         // Send the formatted request to server UNIX
        1:  278:         if (sendto(sockfd, send_buf, strlen(send_buf), 0, (struct sockaddr*)&unix_server_addr, unix_addr_len) == -1) {
        1:  279:             perror("sendto");
        1:  280:             close(sockfd);
        1:  281:             exit(1);
        -:  282:         }
        -:  283: 
    #####:  284:         printf("client: sent request via UNIX --> '%s'\n", send_buf);
        -:  285: 
    #####:  286:         if ((numbytes = recvfrom(sockfd, buf, MAXDATASIZE-1, 0, NULL, NULL)) == -1) {
    #####:  287:             perror("recv");
    #####:  288:             close(sockfd);
    #####:  289:             exit(1);
        -:  290:         }
        -:  291:     }
        -:  292: 
        -:  293:         // Null-terminate the received data to make it a valid string
    #####:  294:         buf[numbytes] = '\0';
        -:  295: 
        -:  296:         // Print the message received from the server
    #####:  297:         printf("client: received '%s'\n", buf);
        -:  298: 
        -:  299:         // Clean up by closing the socket
    #####:  300:         close(sockfd);
    #####:  301:         free(amount);
    #####:  302:         return 0;
        -:  303:     }
